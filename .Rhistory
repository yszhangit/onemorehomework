}
}, rownames = F)
)
output$hist_plot <- renderPlot({
if (input$state == "ALL") {
hist_dat <- dat[, input$hist_var]
title <- "Country"
}else{
hist_dat <- dat[dat$state == input$state,input$hist_var]
title <- input$state
}
hist(hist_dat, breaks = 15, main = title , xlab = "", col = "#7099DB", border = "white")
})
}
shinyApp(ui,server)
ui <- fluidPage(
title="US Census By Counties 2010",
h1("US census by counties", align = "center"),
p("Developing Data Products peer-graded assignment", align = "right"),
p("Yinshu Zhang, Feb. 2nd, 2019",align = "right"),
sidebarLayout(
sidebarPanel(
selectInput("state","state",states),
checkboxGroupInput("show_vars", "column selection",
names(dat),
selected = names(dat)[1:5]
),
numericInput("pop_limit", label=h4("hide counties with populition(2010) less than"), value=100),
selectInput("hist_var","column histogram",names(dat)[3:length(names(dat))]),
plotOutput(outputId="hist_plot")
),
mainPanel(
DT::dataTableOutput("tab_out"),
includeHTML("doc.html")
)
)
)
server <- function(input,output) {
output$tab_out <- DT::renderDataTable(DT::datatable({
if (input$state == "ALL") {
data <- dat[dat$population_2010>input$pop_limit,input$show_vars]
}else{
data <- dat[dat$population_2010>input$pop_limit & dat$state == input$state,input$show_vars]
}
}, rownames = F)
)
output$hist_plot <- renderPlot({
if (input$state == "ALL") {
hist_dat <- dat[, input$hist_var]
title <- "Country"
}else{
hist_dat <- dat[dat$state == input$state,input$hist_var]
title <- input$state
}
hist(hist_dat, breaks = 15, main = title , xlab = "", col = "#7099DB", border = "white")
})
}
shinyApp(ui,server)
ui <- fluidPage(
title="US Census By Counties 2010",
h1("US census by counties", align = "center"),
p("Developing Data Products peer-graded assignment", align = "right"),
p("Yinshu Zhang, Feb. 2nd, 2019",align = "right"),
hr(),
sidebarLayout(
sidebarPanel(
selectInput("state","state",states),
checkboxGroupInput("show_vars", "column selection",
names(dat),
selected = names(dat)[1:5]
),
numericInput("pop_limit", label=h4("hide counties with populition(2010) less than"), value=100),
selectInput("hist_var","column histogram",names(dat)[3:length(names(dat))]),
plotOutput(outputId="hist_plot")
),
mainPanel(
DT::dataTableOutput("tab_out"),
includeHTML("doc.html")
)
)
)
server <- function(input,output) {
output$tab_out <- DT::renderDataTable(DT::datatable({
if (input$state == "ALL") {
data <- dat[dat$population_2010>input$pop_limit,input$show_vars]
}else{
data <- dat[dat$population_2010>input$pop_limit & dat$state == input$state,input$show_vars]
}
}, rownames = F)
)
output$hist_plot <- renderPlot({
if (input$state == "ALL") {
hist_dat <- dat[, input$hist_var]
title <- "Country"
}else{
hist_dat <- dat[dat$state == input$state,input$hist_var]
title <- input$state
}
hist(hist_dat, breaks = 15, main = title , xlab = "", col = "#7099DB", border = "white")
})
}
shinyApp(ui,server)
runApp()
install.packages('rconnect')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='yszhangit',
token='466E6D5371CC20BBA371CE772B24F19A',
secret='60dvqRnRdsQMGYFqLZwJvIzuRlmzvxj+Fm3Q+dit')
library(rsconnect)
rsconnect::deployApp(".")
getwd()
rsconnect::deployApp(
"C:/Users/zhang/Desktop/R/onemorehomework/app.R",
addFile = c('C:/Users/zhang/Desktop/R/onemorehomework/doc.html')
)
rsconnect::deployApp(
"C:/Users/zhang/Desktop/R/onemorehomework/app.R",
addFile = c('C:/Users/zhang/Desktop/R/onemorehomework/doc.html'),
account = 'yszhangit@github.com', server  = 'shinyapps.io'
)
rsconnect::deployApp(
"C:/Users/zhang/Desktop/R/onemorehomework/app.R",
appFile = c('C:/Users/zhang/Desktop/R/onemorehomework/doc.html'),
account = 'yszhangit@github.com', server  = 'shinyapps.io'
)
rsconnect::deployApp(
"C:/Users/zhang/Desktop/R/onemorehomework/app.R",
appFile = c('C:/Users/zhang/Desktop/R/onemorehomework/doc.html')
)
rsconnect::deployApp( "C:/Users/zhang/Desktop/R/onemorehomework/app.R", appFile = c('C:/Users/zhang/Desktop/R/onemorehomework/doc.html') )
rsconnect::deployApp(
"C:/Users/zhang/Desktop/R/onemorehomework/app.R",
appFiles = c('C:/Users/zhang/Desktop/R/onemorehomework/doc.html'),
account = 'yszhangit@github.com', server  = 'shinyapps.io'
)
rsconnect::deployApp(
"C:/Users/zhang/Desktop/R/onemorehomework",
appFiles = c('C:/Users/zhang/Desktop/R/onemorehomework/doc.html'),
account = 'yszhangit@github.com', server  = 'shinyapps.io'
)
rsconnect::deployApp(
"C:/Users/zhang/Desktop/R/onemorehomework",
appFiles = c('C:/Users/zhang/Desktop/R/onemorehomework/doc.html')
)
rsconnect::deployApp(
"C:/Users/zhang/Desktop/R/onemorehomework",
appFiles = c('C:/Users/zhang/Desktop/R/onemorehomework/doc.html')
)
rsconnect::deployApp(
"C:/Users/zhang/Desktop/R/onemorehomework",
appFiles = c('C:/Users/zhang/Desktop/R/onemorehomework/doc.html')
)
rsconnect::deployApp( "C:/Users/zhang/Desktop/R/onemorehomework" )
saveRDS(dat, file = 'us_counties.rds')
dat <- readRDS('us_county.rds')
rm(dat)
dat <- readRDS('us_counties.rds')
ui <- fluidPage(
title="US Census By Counties 2010",
h1("US census by counties", align = "center"),
p("Developing Data Products peer-graded assignment", align = "right"),
p("Yinshu Zhang, Feb. 2nd, 2019",align = "right"),
hr(),
sidebarLayout(
sidebarPanel(
selectInput("state","state",states),
checkboxGroupInput("show_vars", "column selection",
names(dat),
selected = names(dat)[1:5]
),
numericInput("pop_limit", label=h4("hide counties with populition(2010) less than"), value=100),
selectInput("hist_var","column histogram",names(dat)[3:length(names(dat))]),
plotOutput(outputId="hist_plot")
),
mainPanel(
DT::dataTableOutput("tab_out"),
includeHTML("doc.html")
)
)
)
server <- function(input,output) {
output$tab_out <- DT::renderDataTable(DT::datatable({
if (input$state == "ALL") {
data <- dat[dat$population_2010>input$pop_limit,input$show_vars]
}else{
data <- dat[dat$population_2010>input$pop_limit & dat$state == input$state,input$show_vars]
}
}, rownames = F)
)
output$hist_plot <- renderPlot({
if (input$state == "ALL") {
hist_dat <- dat[, input$hist_var]
title <- "Country"
}else{
hist_dat <- dat[dat$state == input$state,input$hist_var]
title <- input$state
}
hist(hist_dat, breaks = 15, main = title , xlab = "", col = "#7099DB", border = "white")
})
}
shinyApp(ui,server)
library(shiny)
library(DT)
dat <- readRDS('us_counties.rds')
ui <- fluidPage(
title="US Census By Counties 2010",
h1("US census by counties", align = "center"),
p("Developing Data Products peer-graded assignment", align = "right"),
p("Yinshu Zhang, Feb. 2nd, 2019",align = "right"),
hr(),
sidebarLayout(
sidebarPanel(
selectInput("state","state",states),
checkboxGroupInput("show_vars", "column selection",
names(dat),
selected = names(dat)[1:5]
),
numericInput("pop_limit", label=h4("hide counties with populition(2010) less than"), value=100),
selectInput("hist_var","column histogram",names(dat)[3:length(names(dat))]),
plotOutput(outputId="hist_plot")
),
mainPanel(
DT::dataTableOutput("tab_out"),
includeHTML("doc.html")
)
)
)
server <- function(input,output) {
output$tab_out <- DT::renderDataTable(DT::datatable({
if (input$state == "ALL") {
data <- dat[dat$population_2010>input$pop_limit,input$show_vars]
}else{
data <- dat[dat$population_2010>input$pop_limit & dat$state == input$state,input$show_vars]
}
}, rownames = F)
)
output$hist_plot <- renderPlot({
if (input$state == "ALL") {
hist_dat <- dat[, input$hist_var]
title <- "Country"
}else{
hist_dat <- dat[dat$state == input$state,input$hist_var]
title <- input$state
}
hist(hist_dat, breaks = 15, main = title , xlab = "", col = "#7099DB", border = "white")
})
}
shinyApp(ui,server)
?saveRDS
library(rsconnect)
rm(dat)
rm(ui)
rm(states)
rm(countyComplete)
runApp()
dat <- readRDS('us_counties.rds')
# get list of stats and add "all" at beginning
states <- c("ALL",as.character(unique(dat$state)))
ui <- fluidPage(
title="US Census By Counties 2010",
h1("US census by counties", align = "center"),
p("Developing Data Products peer-graded assignment", align = "right"),
p("Yinshu Zhang, Feb. 2nd, 2019",align = "right"),
hr(),
sidebarLayout(
sidebarPanel(
selectInput("state","state",states),
checkboxGroupInput("show_vars", "column selection",
names(dat),
selected = names(dat)[1:5]
),
numericInput("pop_limit", label=h4("hide counties with populition(2010) less than"), value=100),
selectInput("hist_var","column histogram",names(dat)[3:length(names(dat))]),
plotOutput(outputId="hist_plot")
),
mainPanel(
DT::dataTableOutput("tab_out"),
includeHTML("doc.html")
)
)
)
server <- function(input,output) {
output$tab_out <- DT::renderDataTable(DT::datatable({
if (input$state == "ALL") {
data <- dat[dat$population_2010>input$pop_limit,input$show_vars]
}else{
data <- dat[dat$population_2010>input$pop_limit & dat$state == input$state,input$show_vars]
}
}, rownames = F)
)
output$hist_plot <- renderPlot({
if (input$state == "ALL") {
hist_dat <- dat[, input$hist_var]
title <- "Country"
}else{
hist_dat <- dat[dat$state == input$state,input$hist_var]
title <- input$state
}
hist(hist_dat, breaks = 15, main = title , xlab = "", col = "#7099DB", border = "white")
})
}
shinyApp(ui,server)
plot(dat$median_household_income, dat$foreign_born)
rm(ui)
rm(server)
dat <- dat[dat$population_2010 > 100, ]
plot(dat$median_household_income, dat$foreign_born)
dat <- readRDS('us_counties.rds')
dat <- dat[dat$population_2010 > 1000, ]
plot(dat$median_household_income, dat$foreign_born)
plot(dat$median_household_income, dat$white)
plot(dat$median_household_income/1000, dat$white)
plot(dat$median_household_income/1000, dat$black)
plot(dat$median_household_income/1000, dat$asian)
plot(dat$median_household_income/1000, dat$hispanic)
library(leaflet)
library(openintro)
data("countyComplete")
countyComplete
data("countyComplete")
dat <- countyComplete[,c("state","name","pop2000","pop20100",
"home_ownership","median_household_income","median_val_owner_occupied",
"white","black","asian","hispanic",
"foreign_born","foreign_spoken_at_home",
"poverty","mean_work_travel","FIPS"
)]
dat <- countyComplete[,c("state","name","pop2000","pop20100",
"home_ownership","median_household_income","median_val_owner_occupied",
"white","black","asian","hispanic",
"foreign_born","foreign_spoken_at_home",
"poverty","mean_work_travel","FIPS"
)]
dat <- countyComplete[,c("state","name","pop2000","pop2010",
"home_ownership","median_household_income","median_val_owner_occupied",
"white","black","asian","hispanic",
"foreign_born","foreign_spoken_at_home",
"poverty","mean_work_travel","FIPS"
)]
# assuming NA response is zero
dat[is.na(dat)] <- 0
# percentage of population change
dat$popchgpct <- round((dat$pop2010-dat$pop2000)/dat$pop2000*100,2)
# percentage of income over house value
dat$income_housevalue_pct <- round(dat$median_household_income/dat$median_val_owner_occupied*100,2)
# combain other races
dat$other_race <- round(100 - dat$white - dat$black - dat$hispanic - dat$asian, 2)
# census error
dat[dat$other_race < 0, "other_race"] <- 0
# re-order columns
dat <- dat[c(1,2,3,4,16,5,6,7,17,8,9,10,11,18,12,13,14,15,16)]
# rename columns
colnames(dat) <- c("state","county","population_2000","population_2010","population_change",
"home_ownership","median_household_income",
"median_house_value","income_to_house_value_percentage",
"white","black","asian","hispanic","other_race",
"foreign_born","foreign_language_spoken_at_home",
"mean_work_travel_distance","poverty","FIPS"
)
saveRDS(dat, file = 'us_counties.rds')
dat <- readRDS('us_counties.rds')
dat <- readRDS('us_counties.rds')
# FIPS not needed in this app, will be used in maps
dat <- dat[, -"FIPS"]
# FIPS not needed in this app, will be used in maps
dat <- dat[, -c("FIPS")]
# FIPS not needed in this app, will be used in maps
dat <- subset(dat, select= -c("FIPS"))
# FIPS not needed in this app, will be used in maps
dat <- subset(dat, select= -c(FIPS))
# get list of stats and add "all" at beginning
states <- c("ALL",as.character(unique(dat$state)))
ui <- fluidPage(
title="US Census By Counties 2010",
h1("US census by counties", align = "center"),
p("Developing Data Products peer-graded assignment", align = "right"),
p("Yinshu Zhang, Feb. 2nd, 2019",align = "right"),
hr(),
sidebarLayout(
sidebarPanel(
selectInput("state","state",states),
checkboxGroupInput("show_vars", "column selection",
names(dat),
selected = names(dat)[1:5]
),
numericInput("pop_limit", label=h4("hide counties with populition(2010) less than"), value=100),
selectInput("hist_var","column histogram",names(dat)[3:length(names(dat))]),
plotOutput(outputId="hist_plot")
),
mainPanel(
DT::dataTableOutput("tab_out"),
includeHTML("doc.html")
)
)
)
server <- function(input,output) {
output$tab_out <- DT::renderDataTable(DT::datatable({
if (input$state == "ALL") {
data <- dat[dat$population_2010>input$pop_limit,input$show_vars]
}else{
data <- dat[dat$population_2010>input$pop_limit & dat$state == input$state,input$show_vars]
}
}, rownames = F)
)
output$hist_plot <- renderPlot({
if (input$state == "ALL") {
hist_dat <- dat[, input$hist_var]
title <- "Country"
}else{
hist_dat <- dat[dat$state == input$state,input$hist_var]
title <- input$state
}
hist(hist_dat, breaks = 15, main = title , xlab = "", col = "#7099DB", border = "white")
})
}
shinyApp(ui,server)
install.packages("urbnmapr")
devtools::install_github("UrbanInstitute/urbnmapr")
library(urbnmapr)
library(dplyr)
states %>%
ggplot(aes(long, lat, group = group)) +
geom_polygon(fill = "grey", color = "#ffffff", size = 0.25) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45)
library(ggplot2)
states %>%
ggplot(aes(long, lat, group = group)) +
geom_polygon(fill = "grey", color = "#ffffff", size = 0.25) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45)
#library(ggplot2)
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
#library(ggplot2)
library(tidyverse)
states %>%
ggplot(aes(long, lat, group = group)) +
geom_polygon(fill = "grey", color = "#ffffff", size = 0.25) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45)
rm(states)
states %>%
ggplot(aes(long, lat, group = group)) +
geom_polygon(fill = "grey", color = "#ffffff", size = 0.25) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45)
household_data <- left_join(countydata, counties, by = "county_fips")
household_data %>%
ggplot(aes(long, lat, group = group, fill = medhhincome)) +
geom_polygon(color = "#ffffff", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45)
household_data %>%
ggplot(aes(long, lat, group = group, fill = medhhincome)) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45)
household_data %>%
ggplot(aes(long, lat, group = group, fill = medhhincome)) +
geom_polygon(color = "blue", size = 0.05) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45)
# rename columns
colnames(dat) <- c("state","county","population_2000","population_2010","population_change",
"home_ownership","median_household_income",
"median_house_value","income_to_house_value_percentage",
"white","black","asian","hispanic","other_race",
"foreign_born","foreign_language_spoken_at_home",
"mean_work_travel_distance","poverty","county_fips"
)
dat <- countyComplete[,c("state","name","pop2000","pop2010",
"home_ownership","median_household_income","median_val_owner_occupied",
"white","black","asian","hispanic",
"foreign_born","foreign_spoken_at_home",
"poverty","mean_work_travel","FIPS"
)]
# rename columns
colnames(dat) <- c("state","county","population_2000","population_2010","population_change",
"home_ownership","median_household_income",
"median_house_value","income_to_house_value_percentage",
"white","black","asian","hispanic","other_race",
"foreign_born","foreign_language_spoken_at_home",
"mean_work_travel_distance","poverty","county_fips"
)
# assuming NA response is zero
dat[is.na(dat)] <- 0
# percentage of population change
dat$popchgpct <- round((dat$pop2010-dat$pop2000)/dat$pop2000*100,2)
# percentage of income over house value
dat$income_housevalue_pct <- round(dat$median_household_income/dat$median_val_owner_occupied*100,2)
# combain other races
dat$other_race <- round(100 - dat$white - dat$black - dat$hispanic - dat$asian, 2)
# census error
dat[dat$other_race < 0, "other_race"] <- 0
# re-order columns
dat <- dat[c(1,2,3,4,16,5,6,7,17,8,9,10,11,18,12,13,14,15,16)]
# rename columns
colnames(dat) <- c("state","county","population_2000","population_2010","population_change",
"home_ownership","median_household_income",
"median_house_value","income_to_house_value_percentage",
"white","black","asian","hispanic","other_race",
"foreign_born","foreign_language_spoken_at_home",
"mean_work_travel_distance","poverty","county_fips"
)
saveRDS(dat, file = 'us_counties.rds')
dat <- readRDS('us_counties.rds')
counties
hh_data <- left_join(dat, counties, by="county_fips")
hh_data <- left_join(dat, counties, by=c("county_fips","county_fips"))
household_data <- left_join(countydata, counties, by = "county_fips")
household_data %>%
ggplot(aes(long, lat, group = group, fill = medhhincome)) +
geom_polygon(color = NA) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
labs(fill = "Median Household Income")
rm(ui)
rm(server)
q()
